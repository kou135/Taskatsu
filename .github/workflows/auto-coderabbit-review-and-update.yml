name: Auto PR Summary with Gemini

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate_and_update:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Post CodeRabbit review comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.MY_PAT }}
          issue-number: ${{ github.event.pull_request.number }}
          body: "@coderabbitai review"

      - name: Wait for CodeRabbit summary
        id: wait_for_comment
        run: |
          echo "Waiting for CodeRabbit summary..."
          COMMENT_FOUND=false
          for i in {1..10}; do
            sleep 15
            COMMENTS=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments)
            SUMMARY=$(echo "$COMMENTS" | jq -r '.[] | select(.user.login=="coderabbitai") | .body' | tail -n1)
            if [[ ! -z "$SUMMARY" ]]; then
              echo "summary<<EOF" >> $GITHUB_OUTPUT
              echo "$SUMMARY" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              COMMENT_FOUND=true
              break
            fi
          done

          if [ "$COMMENT_FOUND" = false ]; then
            echo "Timed out waiting for CodeRabbit comment"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate PR body using Gemini API
        id: generate_pr_body
        run: |
          SUMMARY="${{ steps.wait_for_comment.outputs.summary }}"
          PROMPT="Based on the following summary, generate a clear and detailed pull request description:\n\n${SUMMARY}"

          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [
                {
                  "parts": [
                    { "text": "'"${PROMPT}"'" }
                  ]
                }
              ]
            }')

          BODY=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update PR body
        run: |
          echo "Updating PR body..."
          gh pr edit ${{ github.event.pull_request.number }} --body "${{ steps.generate_pr_body.outputs.pr_body }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}