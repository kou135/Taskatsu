name: Auto PR Summary with Gemini

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate_and_update:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Post CodeRabbit review comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.MY_PAT }}
          issue-number: ${{ github.event.pull_request.number }}
          body: "@coderabbitai review"

      - name: Wait for CodeRabbit summary (Debug Mode)
        id: wait_for_comment
        run: |
          echo ":sleuth_or_spy: Starting to poll for CodeRabbit summary comment..."
          echo ":pushpin: Repository: $GITHUB_REPOSITORY"
          echo ":pushpin: Pull Request #: $PR_NUMBER"

          for i in {1..20}; do
            echo ":hourglass_flowing_sand: Polling attempt $i..."
            sleep 15

            echo ":outbox_tray: Fetching issue comments via GitHub API..."
            COMMENTS=$(gh api repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments)

            echo ":inbox_tray: Raw comment payload:"
            echo "$COMMENTS" | jq '.'

            echo ":mag: Extracting latest comment by 'coderabbitai'..."
            SUMMARY=$(echo "$COMMENTS" | jq -r '.[] | select(.user.login=="coderabbitai") | .body' | tail -n1)

            if [[ -n "$SUMMARY" ]]; then
              echo ":white_check_mark: Found CodeRabbit comment:"
              echo "$SUMMARY"
              echo "summary<<EOF" >> $GITHUB_OUTPUT
              echo "$SUMMARY" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              exit 0
            else
              echo ":x: CodeRabbit comment not found yet."
            fi
          done

          echo ":no_entry: Timed out waiting for CodeRabbit summary comment."
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Generate PR body using Gemini API
        id: generate_pr_body
        run: |
          SUMMARY="${{ steps.wait_for_comment.outputs.summary }}"
          PROMPT="Based on the following summary, generate a clear and detailed pull request description:\n\n${SUMMARY}"

          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [
                {
                  "parts": [
                    { "text": "'"${PROMPT}"'" }
                  ]
                }
              ]
            }')

          BODY=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update PR body
        run: |
          echo "Updating PR body..."
          gh pr edit ${{ github.event.pull_request.number }} --body "${{ steps.generate_pr_body.outputs.pr_body }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}