name: Auto PR Summary

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate_and_update:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Post CodeRabbit review comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.MY_PAT }}
          issue-number: ${{ github.event.pull_request.number }}
          body: "@coderabbitai review"

      - name: Wait for CodeRabbit summary
        id: wait_for_comment
        run: |
          for i in {1..20}; do
            sleep 15
            
            # レビューコメントを取得（編集されたコメントも含む）
            REVIEWS=$(gh api repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/reviews)
            COMMENTS=$(gh api repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments)
            
            echo "=== DEBUG: Raw Reviews Response ==="
            echo "$REVIEWS" | jq '.'
            echo "=== DEBUG: Raw Comments Response ==="
            echo "$COMMENTS" | jq '.'
            echo "================================"
            
            # CodeRabbitのコメントを抽出（最も長いコメントを取得）
            REVIEW_SUMMARY=$(echo "$REVIEWS" | jq -r '.[] | select(.user.login=="coderabbitai[bot]") | .body' | awk '{print length, $0}' | sort -nr | head -1 | cut -d' ' -f2-)
            COMMENT_SUMMARY=$(echo "$COMMENTS" | jq -r '.[] | select(.user.login=="coderabbitai[bot]") | .body' | awk '{print length, $0}' | sort -nr | head -1 | cut -d' ' -f2-)
            

            # デバッグ用：実際のコメント内容を確認
            echo "=== DEBUG: Review Summary ==="
            echo "$REVIEW_SUMMARY"
            echo "=== DEBUG: Comment Summary ==="
            echo "$COMMENT_SUMMARY"
            echo "=============================="
            
            # レビュー完了を示すキーワードを検索
            if [[ -n "$REVIEW_SUMMARY" ]] && ([[ "$REVIEW_SUMMARY" == *"Walkthrough"* ]] || [[ "$REVIEW_SUMMARY" == *"Summary"* ]] || [[ "$REVIEW_SUMMARY" == *"Changes"* ]]); then
              SUMMARY="$REVIEW_SUMMARY"
            elif [[ -n "$COMMENT_SUMMARY" ]] && ([[ "$COMMENT_SUMMARY" == *"Walkthrough"* ]] || [[ "$COMMENT_SUMMARY" == *"Summary"* ]] || [[ "$COMMENT_SUMMARY" == *"Changes"* ]]); then
              SUMMARY="$COMMENT_SUMMARY"
            else
              SUMMARY=""
            fi

            if [[ -n "$SUMMARY" ]]; then
              echo "summary<<EOF" >> $GITHUB_OUTPUT
              echo "$SUMMARY" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "Timed out waiting for CodeRabbit summary comment."
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Generate PR body using Gemini API
        id: generate_pr_body
        run: |
          SUMMARY="${{ steps.wait_for_comment.outputs.summary }}"
          
          # PRテンプレートを読み込む
          PR_TEMPLATE=$(cat .github/PULL_REQUEST_TEMPLATE.md)
          
          # プロンプトのテンプレートを定義。
          PROMPT_TEMPLATE="以下はGitHubのプルリクエストに対するAIレビューコメントです。この内容をもとに、下記のPRテンプレートの「変更内容」欄にふさわしい日本語の要約文、そして想定される「実装の背景」欄を作成してください。\n\n【AIレビューコメント】\n%s\n\n【PRテンプレート】\n%s\n\n# 出力条件\n- 「### 変更内容」欄にそのまま貼れるような、簡潔で分かりやすい日本語でまとめてください。\n- 「### 実装の背景」欄も推測して作成してください。\n- テンプレートの他の欄「### この実装のゴール」や「チェックリスト」は絶対に中身は埋めないが、作成者が記述する用にそのまま出力してください。\n- 余計な挨拶や説明文は不要です。「変更内容」と「実装の背景」の両方を出力してください。"
          
          FULL_PROMPT=$(printf "$PROMPT_TEMPLATE" "$SUMMARY" "$PR_TEMPLATE")

          JSON_PAYLOAD=$(jq -n \
            --arg prompt "$FULL_PROMPT" \
            '{contents: [{parts: [{text: $prompt}]}]}')

          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          BODY=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          
          if [ -z "$BODY" ] || [ "$BODY" == "null" ]; then
            echo "::error::Failed to extract body from Gemini response."
            exit 1
          fi

          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update PR body
        run: |
          echo "Updating PR body..."
          gh pr edit ${{ github.event.pull_request.number }} --body "${{ steps.generate_pr_body.outputs.pr_body }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}