name: Auto PR Summary with Gemini

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  generate_and_update:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Post CodeRabbit review comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.MY_PAT }}
          issue-number: ${{ github.event.pull_request.number }}
          body: "@coderabbitai review"

      - name: Wait for CodeRabbit summary
        id: wait_for_comment
        run: |
          echo "Polling for CodeRabbit summary comment..."
          # 一時ファイルを作成
          SUMMARY_FILE=$(mktemp)
          
          # ★★★ 変更点 1 ★★★
          # このステップの出力として、要約の中身ではなく「ファイルへのパス」を渡す
          echo "summary_file_path=${SUMMARY_FILE}" >> $GITHUB_OUTPUT
          
          for i in {1..30}; do
            echo "Polling attempt $i..."
            sleep 30
            
            COMMENTS=$(gh api repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments)
            
            # 取得した要約を一時ファイルに書き込む
            echo "$COMMENTS" | jq -r '.[] | select(.user.login=="coderabbitai[bot]" and .body and (.body | contains("<!-- walkthrough_start -->"))) | .body' > "$SUMMARY_FILE"

            # ファイルのサイズで要約が書き込まれたかを判断
            if [[ -s "$SUMMARY_FILE" ]]; then
              echo "Found CodeRabbit summary comment."
              exit 0
            else
              echo "CodeRabbit summary comment not found yet."
            fi
          done

          echo "Timed out waiting for CodeRabbit summary comment."
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Generate PR body using Gemini API
        id: generate_pr_body
        run: |
          # ★★★ 変更点 2 ★★★
          # 前のステップから、要約が保存された「ファイルへのパス」を受け取る
          SUMMARY_FILE_PATH="${{ steps.wait_for_comment.outputs.summary_file_path }}"

          # ファイルが存在し、中身が空でないことを確認
          if [[ ! -s "$SUMMARY_FILE_PATH" ]]; then
            echo "::error::Summary file is missing or empty."
            exit 1
          fi
          
          # ★★★ 変更点 3 ★★★
          # ファイルから要約の中身を読み込む
          SUMMARY=$(cat "$SUMMARY_FILE_PATH")

          # PRテンプレートが存在すれば読み込む
          if [ -f ".github/PULL_REQUEST_TEMPLATE.md" ]; then
            PR_TEMPLATE=$(cat .github/PULL_REQUEST_TEMPLATE.md)
          else
            PR_TEMPLATE=""
          fi
          
          # プロンプトを組み立てる
          read -r -d '' FULL_PROMPT << EOF
          以下はGitHubのプルリクエストに対するAIレビューコメントです。この内容をもとに、下記のPRテンプレートの「変更内容」と「実装の背景」欄を作成してください。

          【AIレビューコメント】
          $SUMMARY

          【PRテンプレート】
          $PR_TEMPLATE

          # 出力条件
          - PRテンプレートの「### 変更内容」と「### 実装の背景」のセクションを、AIレビューコメントを参考にして埋めてください。
          - 他のセクション（「### この実装のゴール」や「チェックリスト」など）は、テンプレートの形式を維持したまま、中身は空欄にしてください。
          - 全体として、元のPRテンプレートの構造を維持した形で出力してください。
          - 余計な挨拶や説明文は不要です。
          EOF

          JSON_PAYLOAD=$(jq -n --arg prompt "$FULL_PROMPT" '{contents: [{parts: [{text: $prompt}]}]}')

          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          BODY=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          
          if [ -z "$BODY" ] || [ "$BODY" == "null" ]; then
            echo "::error::Failed to extract body from Gemini response."
            exit 1
          fi

          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Update PR body
        run: |
          echo "Updating PR body..."
          gh pr edit ${{ github.event.pull_request.number }} --body-file <(echo "${{ steps.generate_pr_body.outputs.pr_body }}")
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}